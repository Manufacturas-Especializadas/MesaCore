@page "/"

@using CsvHelper;
@using CsvHelper.Configuration;
@using MesaCore.Services;
@using MesaCore.Models;
@using MesaCore.Shared;
@using Microsoft.EntityFrameworkCore;
@using System.Globalization;
@using System.Data;
@using System.Diagnostics;

@inject ShipmentsServices services;

<PageTitle>Embarques</PageTitle>

<Alert @ref="alertRef" Color="Color.Success" Visible="@showAlert" Dismisable="true">
    Archivo cargado correctamente
</Alert>

<InputFile OnChange="@ImportCsvFile" class="form-control mb-2"/>

@* <RadzenDataGrid TItem="Shipment" Data="@shipments" AllowPaging="true" PageSize="10" FilterMode="FilterMode.Advanced" AllowFiltering="true">
    <Columns>
        <RadzenDataGridColumn TItem="Shipment" Property="Packer" Title="Empacador" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="Shipment" Property="Date" Title="Fecha" TextAlign="TextAlign.Center">
            <Template>
                <span>@context.Date.Value.ToShortDateString()</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Shipment" Property="Tiempo" Title="Hora" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="Shipment" Property="ShopOrder" Title="Shop Order" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="Shipment" Property="PartNumber" Title="Part Number" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="Shipment" Property="Qty" Title="Qty" TextAlign="TextAlign.Center"/>
    </Columns>
</RadzenDataGrid> *@

<div class="table-responsive">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Empacador</th>
                <th>Fecha</th>
                <th>Hora</th>
                <th>Shop Order</th>
                <th>Part Number</th>
                <th>Qty</th>
            </tr>
        </thead>
        @if (shipments != null)
        {
            @foreach (var item in shipments)
            {
                <tr>
                    <td>@item.Packer</td>
                    <td>@item.Date.Value.ToShortDateString()</td>
                    <td>@item.Tiempo</td>
                    <td>@item.ShopOrder</td>
                    <td>@item.PartNumber</td>
                    <td>@item.Qty</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6">No hay envíos disponibles.</td>
            </tr>
        }
    </table>
</div>

<PaginationM CurrentPage="currentPage"
             TotalPages="totalPages"
             SelectedPage="@SelectedPageAsync" />


@code {
    private int currentPage = 1;
    private int totalPages;

    int TotalPages;
    List<Shipment> shipments;


    DataTable dt = new DataTable();

    bool showAlert = false;
    Alert alertRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        shipments = await services.GetPagedShipments(currentPage, 10);
        totalPages = await services.GetTotalPagesAsync(10);
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadData();
    }

    private async Task ImportCsvFile(InputFileChangeEventArgs e)
    {
        try
        {
            var fileStream = e.File.OpenReadStream();

            var ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            fileStream.Close();
            ms.Position = 0;


            using (var reader = new StreamReader(ms))
            using (var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)))
            {
                csv.Read();
                csv.ReadHeader();

                foreach(var header in csv.HeaderRecord)
                {
                    dt.Columns.Add(header);
                }

                while(await csv.ReadAsync())
                {
                    var row = dt.NewRow();
                    for(int i = 0; i < csv.HeaderRecord.Length; i++)
                    {
                        row[i] = csv.GetField(i);
                    }
                    dt.Rows.Add(row);
                }

                await services.InserDataIntoDatabase(dt);

                showAlert = true;
                StateHasChanged();

                await Task.Delay(2000);
            }
        }
        catch(Exception ex)
        {
            Debug.WriteLine($"Error al importar el archivo: {ex.Message}");
        }
    }

}