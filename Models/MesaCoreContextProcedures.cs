// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using MesaCore.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace MesaCore.Models
{
    public partial class MesaCoreContext
    {
        private IMesaCoreContextProcedures _procedures;

        public virtual IMesaCoreContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MesaCoreContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMesaCoreContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Sp_GetShipmentsResult>().HasNoKey().ToView(null);
        }
    }

    public partial class MesaCoreContextProcedures : IMesaCoreContextProcedures
    {
        private readonly MesaCoreContext _context;

        public MesaCoreContextProcedures(MesaCoreContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Sp_GetShipmentsResult>> Sp_GetShipmentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sp_GetShipmentsResult>("EXEC @returnValue = [dbo].[Sp_GetShipments]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
